@import "./base.css";
@import "./components.css";
@import "./utilities.css";


.text-gradient-accent {
  @apply bg-gradient-to-tr from-primary-700 via-primary-500 to-primary-500 bg-clip-text text-transparent;
}
.bg-gradient-accent {
  @apply bg-[#d4af37];
}
.bg-gradient-white {
  @apply bg-gradient-to-tr from-white via-gray-200 to-white hover:from-gray-200 hover:via-white hover:to-gray-200;
}
.button {
  cursor: pointer;
  font-size: 1rem;
  font-family: inherit;
  font-weight: 700;
  color: hsl(320, 40%, 40%);
  background-color: hsl(349 100% 95%);
  padding: 0.75em 1.25em;
  border: 0;
  border-radius: 1.25rem;
}

.glow-effect {
  --glow-line-color: #fff;
  --glow-line-thickness: 2px;
  --glow-line-length: 20px;
  --glow-blur-color: #fff;
  --glow-blur-size: 5px;
  --glow-offset: 0px;
  --animation-speed: 1200ms;
  /* do not change, used for calculations */
  --container-offset: 100px;
  position: relative;
}

.glow-container {
  pointer-events: none;
  position: absolute;
  inset: calc(var(--container-offset) / -2);
  width: calc(100% + var(--container-offset));
  height: calc(100% + var(--container-offset));
  opacity: 0;
  /* outline: 3px solid blue; */
}

.glow-blur,
.glow-line {
  width: calc(100% - var(--container-offset) + var(--glow-offset));
  height: calc(100% - var(--container-offset) + var(--glow-offset));
  x: calc((var(--container-offset) / 2) + calc(var(--glow-offset) / -2));
  y: calc((var(--container-offset) / 2) + calc(var(--glow-offset) / -2));
  /* rx: 1.25rem; */
  fill: transparent;
  stroke: black;
  stroke-width: 5px;
  stroke-dasharray: var(--glow-line-length) calc(50px - var(--glow-line-length));
}

.glow-effect:is(:hover, :focus) :is(.glow-line, .glow-blur) {
  stroke-dashoffset: -80px;
  transition: stroke-dashoffset var(--animation-speed) ease-in;
}

.glow-line {
  stroke: var(--glow-line-color);
  stroke-width: var(--glow-line-thickness);
}

.glow-blur {
  filter: blur(var(--glow-blur-size));
  stroke: var(--glow-blur-color);
  stroke-width: var(--glow-blur-size);
}

.glow-effect:is(:hover, :focus) .glow-container {
  animation: glow-visibility ease-in-out var(--animation-speed);
}

@keyframes glow-visibility {
  0%,
  100% {
    opacity: 0;
  }
  25%,
  75% {
    opacity: 1;
  }
}

.glow-effect[data-glow-animation="false"] {
  --glow-line-length: 50px;
}
.glow-effect[data-glow-offset="true"] {
  --glow-offset: 10px;
}

.glow-effect[data-glow-animation="grow"]:is(:hover, :focus) .glow-container {
  scale: 1.3;
  transition: scale var(--animation-speed) linear;
}

/* button two */

.button-two {
  --button-color: #1e293b;
  position: relative;
  margin-top: 8px;
}

.button-two:before {
  content: "";
  inset: -5px;
  position: absolute;
  background-color: #e2e8f0;
  z-index: -1;
  border-radius: 100%;
  padding: 2px;
}

.button-two[data-state="closed"] :is(.top, .bottom) {
  animation: to-open-icon 1s forwards;
}

.button-two[data-state="opened"] :is(.top, .bottom) {
  animation: to-close-icon 1s forwards;
}
.button-two .hamburger {
  transition: rotate 800ms 100ms;
}
.button-two[data-state="opened"] .hamburger {
  rotate: 1turn;
}

.button-two .line.top {
  --rotation: -45deg;
  transform-origin: 65px 45px;
}
.button-two .line.bottom {
  --rotation: 45deg;
  transform-origin: 60px 55px;
}

@keyframes to-close-icon {
  0% {
    stroke-dashoffset: 0;
  }
  40% {
    stroke-dashoffset: 79.9;
  }
  60% {
    stroke-dashoffset: 79.9;
    rotate: calc(var(--rotation));
  }
  100% {
    stroke-dashoffset: 0;
    rotate: var(--rotation);
  }
}
@keyframes to-open-icon {
  0% {
    stroke-dashoffset: 0;
    rotate: var(--rotation);
  }
  40% {
    stroke-dashoffset: 79.9;
    rotate: var(--rotation);
  }
  60% {
    stroke-dashoffset: 79.9;
  }
  100% {
    stroke-dashoffset: 0;
  }
}

.prose {
  text-align: left;
  img {
    border-radius: 20px;
    max-height: 500px;

    @apply pointer-events-none;
  }

  a figcaption {
    @apply sr-only;
  }
}
